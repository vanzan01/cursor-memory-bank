---
description: "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ò–ò –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
globs: "**/**"
alwaysApply: true
---

# INTELLIGENT MODEL SWITCHING SYSTEM

> **TL;DR:** –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ (gemini-2.5-flash) –¥–ª—è REFLECT/VAN, —É–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ (sonnet-4) –¥–ª—è PLAN/CREATIVE, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.

## üß† –ü–†–ò–ù–¶–ò–ü–´ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ï–ô

### –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
**–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**
- REFLECT —Ä–µ–∂–∏–º: gemini-2.5-flash –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- VAN —Ä–µ–∂–∏–º: gemini-2.5-flash –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏: –±—ã—Å—Ç—Ä—ã–µ –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏

**–£–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞**
- PLAN —Ä–µ–∂–∏–º: sonnet-4 –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- CREATIVE —Ä–µ–∂–∏–º: sonnet-4 –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
- IMPLEMENT —Ä–µ–∂–∏–º: sonnet-4 –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

## üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï

### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
```bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ –∏ –∑–∞–¥–∞—á–∏
select_optimal_model() {
  local mode="$1"
  local task_complexity="${2:-medium}"
  local budget_mode="${3:-balanced}"

  echo "üß† –í–´–ë–û–† –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò –ò–ò"
  echo "=============================="
  echo "üìã –†–µ–∂–∏–º: $mode"
  echo "üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: $task_complexity"
  echo "üí∞ –ë—é–¥–∂–µ—Ç: $budget_mode"

  case "$mode" in
    "VAN"|"van")
      if [ "$task_complexity" = "high" ]; then
        echo "claude-3.5-sonnet"  # –î–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      else
        echo "gemini-2.5-flash"   # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      fi
      ;;
    "REFLECT"|"reflect")
      echo "gemini-2.5-flash"     # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      ;;
    "PLAN"|"plan")
      if [ "$budget_mode" = "economy" ]; then
        echo "gemini-2.5-flash"   # –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      else
        echo "claude-3.5-sonnet"  # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      fi
      ;;
    "CREATIVE"|"creative")
      echo "claude-3.5-sonnet"    # –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
      ;;
    "IMPLEMENT"|"implement")
      if [ "$task_complexity" = "low" ]; then
        echo "gemini-2.5-flash"   # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
      else
        echo "claude-3.5-sonnet"  # –°–ª–æ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
      fi
      ;;
    "UNIVERSAL"|"universal")
      echo "claude-3.5-sonnet"    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
      ;;
    *)
      echo "gemini-2.5-flash"     # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      ;;
  esac
}
```

### –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
```bash
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
assess_task_complexity() {
  local task_description="$1"
  local file_count="${2:-0}"
  local lines_of_code="${3:-0}"

  local complexity_score=0

  # –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  if echo "$task_description" | grep -qi "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\|–¥–∏–∑–∞–π–Ω\|–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"; then
    ((complexity_score += 3))
  fi

  if echo "$task_description" | grep -qi "–∞–ª–≥–æ—Ä–∏—Ç–º\|–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\|–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"; then
    ((complexity_score += 2))
  fi

  if echo "$task_description" | grep -qi "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\|API\|–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"; then
    ((complexity_score += 2))
  fi

  # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
  if [ "$file_count" -gt 50 ]; then
    ((complexity_score += 2))
  elif [ "$file_count" -gt 20 ]; then
    ((complexity_score += 1))
  fi

  if [ "$lines_of_code" -gt 10000 ]; then
    ((complexity_score += 2))
  elif [ "$lines_of_code" -gt 1000 ]; then
    ((complexity_score += 1))
  fi

  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  if [ "$complexity_score" -ge 6 ]; then
    echo "high"
  elif [ "$complexity_score" -ge 3 ]; then
    echo "medium"
  else
    echo "low"
  fi
}
```

## üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–û–ò–ú–û–°–¢–¨–Æ

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
```bash
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
track_model_usage() {
  local model_used="$1"
  local tokens_used="${2:-0}"
  local mode="$3"

  local usage_file="memory-bank/system/model_usage.log"
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")

  # –ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  echo "$timestamp,$model_used,$tokens_used,$mode" >> "$usage_file"

  # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  analyze_usage_statistics
}

# –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
analyze_usage_statistics() {
  local usage_file="memory-bank/system/model_usage.log"

  if [ ! -f "$usage_file" ]; then
    return 0
  fi

  echo "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ï–ô"
  echo "=================================="

  # –ü–æ–¥—Å—á–µ—Ç –ø–æ –º–æ–¥–µ–ª—è–º
  echo "üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª—è–º:"
  cut -d',' -f2 "$usage_file" | sort | uniq -c | sort -nr

  # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–µ–∂–∏–º–∞–º
  echo "üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–∂–∏–º–∞–º:"
  cut -d',' -f4 "$usage_file" | sort | uniq -c | sort -nr

  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
  local total_tokens=$(cut -d',' -f3 "$usage_file" | awk '{sum+=$1} END {print sum}')
  echo "üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: $total_tokens"
}
```

## üîÑ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï

### –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã
```bash
# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
dynamic_model_switch() {
  local current_mode="$1"
  local context_complexity="$2"
  local current_model="$3"

  local optimal_model=$(select_optimal_model "$current_mode" "$context_complexity")

  if [ "$current_model" != "$optimal_model" ]; then
    echo "üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò"
    echo "====================="
    echo "üîÑ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: $current_model"
    echo "üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: $optimal_model"
    echo "üìã –ü—Ä–∏—á–∏–Ω–∞: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ($context_complexity)"

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    switch_to_model "$optimal_model"

    echo "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  fi
}

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
switch_to_model() {
  local target_model="$1"

  case "$target_model" in
    "claude-3.5-sonnet")
      echo "üéØ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Claude 3.5 Sonnet"
      # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Sonnet
      ;;
    "gemini-2.5-flash")
      echo "‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Gemini 2.5 Flash"
      # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Gemini
      ;;
    *)
      echo "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: $target_model"
      ;;
  esac
}
```

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –ò–ò –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞ Memory Bank, –±–∞–ª–∞–Ω—Å–∏—Ä—É—è –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.