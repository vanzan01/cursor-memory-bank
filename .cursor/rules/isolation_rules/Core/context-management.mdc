---
description:
globs:
alwaysApply: false
---
---
description: Context management and CONTINUE command rules for Memory Bank system
globs: "**/memory-bank/**", "**/custom_modes/**", "**/VAN/**", "**/PLAN/**", "**/CREATIVE/**", "**/IMPLEMENT/**", "**/QA/**", "**/REFLECT/**", "**/UNIVERSAL/**"
alwaysApply: true
---

# CONTEXT MANAGEMENT & CONTINUE COMMAND RULES

> **TL;DR:** System for maintaining continuity in Memory Bank operations through automatic context saving and restoration during session interruptions or CONTINUE commands.

## üéØ SYSTEM PURPOSE
Ensure Memory Bank operation continuity through automatic saving and restoration of user context during session interruptions or CONTINUE commands.

## üìÅ CONTEXT MANAGEMENT FILES

### 1. Main State File
**File**: `memory-bank/system/current-context.md`
**Purpose**: Save current user request and system state

### 2. Working Mode File
**File**: `memory-bank/system/interaction-mode.txt`
**Purpose**: Save current Memory Bank working mode

### 3. Tasks File
**File**: `memory-bank/tasks.md`
**Purpose**: Main tasks file with current status

## üîÑ CONTEXT SAVING RULES

### When Starting New Task:
1. **Update current-context.md**:
   - Save full user request text
   - Specify current working mode
   - Record task complexity level
   - Add context description

2. **Update interaction-mode.txt**:
   - Record active mode (VAN/PLAN/CREATIVE/IMPLEMENT/QA/REFLECT/UNIVERSAL)

3. **Update tasks.md**:
   - Create new active task
   - Set status to IN_PROGRESS

### During Task Execution:
1. **Regularly update progress** in current-context.md
2. **Save key decisions** and intermediate results
3. **Mark completed stages** in progress list

### When Task Completes:
1. **Clear current-context.md**:
   - Set status to COMPLETED
   - Clear current request
   - Save brief results summary

2. **Update tasks.md**:
   - Move task to completed section
   - Set status to COMPLETED

## üöÄ CONTINUE COMMAND

### CONTINUE Command Triggers:
- User enters "CONTINUE" or "–ü–†–û–î–û–õ–ñ–ê–ô"
- User enters "–ü–†–û–î–û–õ–ñ–ò–¢–¨" or "CONTINUE WORK"
- System detects interrupted task on startup

### Restoration Algorithm:
1. **Check current-context.md**:
   - If status ACTIVE - restore context
   - If status COMPLETED - report completion
   - If file empty - report no tasks

2. **Load Context**:
   - Read last user request
   - Determine current working mode
   - Restore task progress

3. **Continue Execution**:
   - Switch to saved mode
   - Show current progress
   - Continue from stopping point

## üìã MODE INTEGRATION

### VAN Mode:
```markdown
## CONTEXT MANAGEMENT
1. On request receipt - save to current-context.md
2. On project initialization - scan rules/*.md files
3. On project initialization - search TODO/FIXME/HACK in .md files
4. On complexity analysis - update level in context
5. On mode transition - update status
6. On CONTINUE command - restore problem analysis
```

### PLAN Mode:
```markdown
## CONTEXT MANAGEMENT
1. On plan creation - save key decisions
2. On phase determination - update progress
3. On transition to CREATIVE/IMPLEMENT - save plan
4. On CONTINUE command - restore planning
```

### CREATIVE Mode:
```markdown
## CONTEXT MANAGEMENT
1. On creative analysis - save solution variants
2. On decision making - record justifications
3. On guideline creation - save them
4. On CONTINUE command - restore creative process
```

### IMPLEMENT Mode:
```markdown
## CONTEXT MANAGEMENT
1. On implementation start - save build plan
2. On phase execution - update progress
3. On errors - record them and solutions
4. On CONTINUE command - restore build process
```

### QA Mode:
```markdown
## CONTEXT MANAGEMENT
1. On testing - save test results
2. On problem discovery - record them and fixes
3. On transition to REFLECT - save QA report
4. On CONTINUE command - restore testing process
```

### REFLECT Mode:
```markdown
## CONTEXT MANAGEMENT
1. On results analysis - save conclusions
2. On recommendation creation - record them
3. On completion - clear context (task completed)
4. On CONTINUE command - restore reflection process
```

### UNIVERSAL Mode:
```markdown
## CONTEXT MANAGEMENT
1. On automatic transitions - save each mode state
2. On QA interruptions - save main task context
3. On restoration - determine current workflow phase
4. On CONTINUE command - restore full workflow
```

## üîç PROJECT INITIALIZATION

### Project Rules Scanning
On new project initialization or first VAN mode run:

1. **Scan rules/ directory**:
```bash
find rules/ -name "*.md" -type f
```

2. **Analyze found rules**:
   - Read content of each .md file in rules/
   - Determine rule purpose (testing, development, workflow, etc.)
   - Add links to important rules in context

3. **Save rule links in context**:
```markdown
## üìã PROJECT RULES
- `rules/DEVELOPMENT_RULES.md` - Development rules (45KB, 1141 lines)
- `rules/TESTING_BUN.md` - Bun testing rules (38KB, 1419 lines)
- `rules/DEVELOPMENT_WORKFLOW_RULES.md` - Workflow rules (8.7KB, 175 lines)
- `rules/DEVELOPMENT_PROMPT_RULES.md` - Prompt rules (7.9KB, 237 lines)
- `rules/changing_the_rules.md` - Rule modification guide (11KB, 353 lines)
- [other found rules with sizes and line counts]
```

### Task Discovery in Documentation
On project initialization, search for tasks in .md files:

1. **Search TODO, FIXME, HACK**:
```bash
# Standard search with line numbers and file context
grep -r -n -i "TODO\|FIXME\|HACK\|NOTE:" --include="*.md" . | head -30

# Example results:
# rules/DEVELOPMENT_RULES.md:88 - // TODO: Implement real merge logic
# rules/TESTING_BUN.md:347 - // TODO: fix this
# rules/TESTING_BUN.md:448 - // TODO: we've only implemented this for Linux so far.
```

2. **Search incomplete checkboxes**:
```bash
# Find unchecked task boxes
grep -r -n -E "\- \[ \]" --include="*.md" . | head -20

# Example results:
# rules/DEVELOPMENT_PROMPT_RULES.md:80 - - [ ] Document current thoughts/verification needs
# rules/DEVELOPMENT_PROMPT_RULES.md:81 - - [ ] Mark ideas as ‚úÖ successful or ‚ùå failed
# CONTRIBUTING.md:165 - - [ ] Bug fix
```

3. **Search Russian task markers**:
```bash
# Find Russian language task indicators
grep -r -n -i "–Ω—É–∂–Ω–æ\|—Ç—Ä–µ–±—É–µ—Ç—Å—è\|–¥–æ–±–∞–≤–∏—Ç—å\|–∏—Å–ø—Ä–∞–≤–∏—Ç—å" --include="*.md" . | head -20

# Example results:
# memory-bank/system/current-context.md:7 - "–Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
# memory-bank/tasks.md:192 - "–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏–π"
```

4. **Comprehensive project scanning**:
```bash
# Get project rules overview
find rules/ -name "*.md" -type f | head -20

# Get file sizes and line counts for context
find rules/ -name "*.md" -exec wc -l {} + | sort -nr
```

5. **Analyze found tasks**:
   - Categorize by type (bug, enhancement, new feature)
   - Assess priority based on keywords (FIXME > TODO > enhancement)
   - Note file locations and line numbers
   - Add to project task list

6. **Integration into tasks.md**:
```markdown
## üìù TASKS FROM DOCUMENTATION

### Found TODO/FIXME:
- [ ] **rules/DEVELOPMENT_RULES.md:88**: TODO: Implement real merge logic
- [ ] **rules/TESTING_BUN.md:347**: TODO: fix this
- [ ] **rules/TESTING_BUN.md:448**: TODO: we've only implemented this for Linux so far

### Incomplete checkboxes:
- [ ] **rules/DEVELOPMENT_PROMPT_RULES.md:80**: Document current thoughts/verification needs
- [ ] **rules/DEVELOPMENT_PROMPT_RULES.md:81**: Mark ideas as ‚úÖ successful or ‚ùå failed
- [ ] **CONTRIBUTING.md:165**: Bug fix

### Russian task markers:
- [ ] **memory-bank/system/current-context.md:7**: –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- [ ] **memory-bank/tasks.md:192**: –î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏–π
```

### Practical Benefits:
- **Full Visibility**: System sees all project rules and tasks
- **Automation**: No need to manually search for TODOs or rules
- **Context Preservation**: All information saved in context for CONTINUE
- **Multi-language Support**: Supports Russian and English task markers
- **Smart Integration**: Found tasks can be integrated into tasks.md
- **Project Awareness**: Complete understanding of project structure and requirements

## üìã CONTEXT FILE FORMAT

### current-context.md Template:
```markdown
# CURRENT CONTEXT STATE
**Last Updated**: [DATE]
**Status**: ACTIVE|COMPLETED|PAUSED

## üéØ CURRENT USER REQUEST
[Full user request text]

## üîß CURRENT WORKING MODE
**Active Mode**: [MODE]
**Phase**: [PHASE]
**Complexity Level**: [LEVEL]

## üìã TASK CONTEXT
[Task details and progress]

## üìã PROJECT RULES
[Found rules from rules/ directory]

## üìù FOUND TASKS
[TODO/FIXME tasks and incomplete checkboxes]

## üìä PROGRESS TRACKING
- [ ] Stage 1: [Description]
- [ ] Stage 2: [Description]
- [x] Stage 3: [Completed]

## üîç SESSION METRICS
**Started**: [TIMESTAMP]
**Last Activity**: [TIMESTAMP]
**Mode Transitions**: [COUNT]
**Commands Executed**: [COUNT]
```

## üöÄ SUPPORTING COMMANDS

### Context Management Commands:
- **CONTINUE** / **–ü–†–û–î–û–õ–ñ–ê–ô** - Restore interrupted task
- **SHOW CONTEXT** - Display current context state
- **CLEAR CONTEXT** - Clear saved context
- **SAVE CONTEXT** - Manually save current state

### Project Discovery Commands:
- **SCAN RULES** - Scan and integrate project rules
- **FIND TASKS** - Search for tasks in documentation
- **INIT PROJECT** - Full project initialization

## üéØ PRACTICAL APPLICATION EXAMPLES

### Automatic VAN Mode Initialization:
When VAN mode starts, the system automatically:
1. Scans project for rules and tasks
2. Builds comprehensive project context
3. Integrates findings into current-context.md
4. Makes all information available for CONTINUE

### Real Project Example (cursor-memory-bank):
```markdown
## üìã DISCOVERED PROJECT RULES
- rules/DEVELOPMENT_RULES.md (45KB, 1141 lines) - Development standards
- rules/TESTING_BUN.md (38KB, 1419 lines) - Bun testing framework
- rules/DEVELOPMENT_WORKFLOW_RULES.md (8.7KB, 175 lines) - Workflow processes
- rules/DEVELOPMENT_PROMPT_RULES.md (7.9KB, 237 lines) - Prompt engineering
- rules/changing_the_rules.md (11KB, 353 lines) - Rule modification procedures

## üìù DISCOVERED TASKS
### TODO/FIXME (4 found):
- rules/DEVELOPMENT_RULES.md:88 - TODO: Implement real merge logic
- rules/TESTING_BUN.md:347 - TODO: fix this
- rules/TESTING_BUN.md:448 - TODO: Linux implementation needed
- RULES.md:109 - TODO: Replace merge logic

### Incomplete Checkboxes (200+ found):
- rules/DEVELOPMENT_PROMPT_RULES.md:80 - Document verification needs
- CONTRIBUTING.md:165 - Bug fix process
- [+198 more items]

### Russian Task Markers (100+ found):
- memory-bank/system/current-context.md:7 - Context saving requirement
- memory-bank/tasks.md:192 - Deletion justification system
- [+98 more items]
```

### Integration Benefits:
- **Context Awareness**: System understands project structure completely
- **Task Visibility**: All pending work is visible and trackable
- **Rule Compliance**: All project rules are accessible to all modes
- **Continuity**: CONTINUE command has full project context
- **Automation**: No manual rule or task discovery needed

## üîÑ INTEGRATION WORKFLOW

```mermaid
graph TD
    Start["Task Start"] --> Save["Save Context"]
    Save --> Execute["Execute Task"]
    Execute --> Update["Update Progress"]
    Update --> Check{"Task Complete?"}
    Check -->|"No"| Execute
    Check -->|"Yes"| Clear["Clear Context"]
    Clear --> Archive["Archive Results"]

    Interrupt["Interruption"] --> SaveState["Save Current State"]
    SaveState --> Wait["Wait for CONTINUE"]
    Wait --> Restore["Restore Context"]
    Restore --> Execute
```

This system ensures complete continuity for Memory Bank operations with automatic project awareness and task discovery capabilities.
